// src/main/java/com/quizapp/model/Question.java
package com.quizapp.model;

/**
 * Represents a single quiz question with its options and correct answer.
 * This is a simple Plain Old Java Object (POJO).
 */
public class Question {
    private int id;
    private String questionText;
    private String optionA;
    private String optionB;
    private String optionC;
    private String optionD;
    private char correctOption; // 'A', 'B', 'C', or 'D'

    public Question(int id, String questionText, String optionA, String optionB, String optionC, String optionD, char correctOption) {
        this.id = id;
        this.questionText = questionText;
        this.optionA = optionA;
        this.optionB = optionB;
        this.optionC = optionC;
        this.optionD = optionD;
        this.correctOption = correctOption;
    }

    // Constructor for new questions (before ID is assigned by DB)
    public Question(String questionText, String optionA, String optionB, String optionC, String optionD, char correctOption) {
        this(0, questionText, optionA, optionB, optionC, optionD, correctOption); // ID will be generated by DB
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getQuestionText() {
        return questionText;
    }

    public String getOptionA() {
        return optionA;
    }

    public String getOptionB() {
        return optionB;
    }

    public String getOptionC() {
        return optionC;
    }

    public String getOptionD() {
        return optionD;
    }

    public char getCorrectOption() {
        return correctOption;
    }

    // Setters (for editing questions, though often ID is not set manually)
    public void setId(int id) {
        this.id = id;
    }

    public void setQuestionText(String questionText) {
        this.questionText = questionText;
    }

    public void setOptionA(String optionA) {
        this.optionA = optionA;
    }

    public void setOptionB(String optionB) {
        this.optionB = optionB;
    }

    public void setOptionC(String optionC) {
        this.optionC = optionC;
    }

    public void setOptionD(String optionD) {
        this.optionD = optionD;
    }

    public void setCorrectOption(char correctOption) {
        this.correctOption = correctOption;
    }

    @Override
    public String toString() {
        return "Question{" +
               "id=" + id +
               ", questionText='" + questionText + '\'' +
               ", optionA='" + optionA + '\'' +
               ", optionB='" + optionB + '\'' +
               ", optionC='" + optionC + '\'' +
               ", optionD='" + optionD + '\'' +
               ", correctOption=" + correctOption +
               '}';
    }
}
```

```java
// src/main/java/com/quizapp/util/DatabaseManager.java
package com.quizapp.util;

import com.quizapp.model.Question;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Manages all database interactions for the QuizApp.
 * Uses JDBC to connect to a MySQL database.
 */
public class DatabaseManager {
    // JDBC URL, username, and password of MySQL database
    private static final String DB_URL = "jdbc:mysql://localhost:3306/QuizAppDB";
    private static final String USER = "your_mysql_username"; // !!! CHANGE THIS
    private static final String PASS = "your_mysql_password"; // !!! CHANGE THIS

    /**
     * Establishes a connection to the database.
     * @return A valid Connection object, or null if connection fails.
     */
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, USER, PASS);
    }

    /**
     * Loads all questions from the database.
     * @return A list of Question objects.
     */
    public List<Question> loadQuestions() {
        List<Question> questions = new ArrayList<>();
        String sql = "SELECT id, question_text, option_a, option_b, option_c, option_d, correct_option FROM questions";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                int id = rs.getInt("id");
                String questionText = rs.getString("question_text");
                String optionA = rs.getString("option_a");
                String optionB = rs.getString("option_b");
                String optionC = rs.getString("option_c");
                String optionD = rs.getString("option_d");
                char correctOption = rs.getString("correct_option").charAt(0);

                questions.add(new Question(id, questionText, optionA, optionB, optionC, optionD, correctOption));
            }
        } catch (SQLException e) {
            System.err.println("Error loading questions from database: " + e.getMessage());
            // In a real app, you might show a GUI error message or log it
        }
        return questions;
    }

    /**
     * Adds a new question to the database.
     * @param question The Question object to add.
     * @return true if successful, false otherwise.
     */
    public boolean addQuestion(Question question) {
        String sql = "INSERT INTO questions (question_text, option_a, option_b, option_c, option_d, correct_option) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, question.getQuestionText());
            pstmt.setString(2, question.getOptionA());
            pstmt.setString(3, question.getOptionB());
            pstmt.setString(4, question.getOptionC());
            pstmt.setString(5, question.getOptionD());
            pstmt.setString(6, String.valueOf(question.getCorrectOption()));

            int affectedRows = pstmt.executeUpdate();
            if (affectedRows > 0) {
                // Get the generated ID and update the Question object
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        question.setId(generatedKeys.getInt(1));
                    }
                }
                return true;
            }
        } catch (SQLException e) {
            System.err.println("Error adding question to database: " + e.getMessage());
        }
        return false;
    }

    /**
     * Updates an existing question in the database.
     * @param question The Question object with updated details.
     * @return true if successful, false otherwise.
     */
    public boolean updateQuestion(Question question) {
        String sql = "UPDATE questions SET question_text = ?, option_a = ?, option_b = ?, option_c = ?, option_d = ?, correct_option = ? WHERE id = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, question.getQuestionText());
            pstmt.setString(2, question.getOptionA());
            pstmt.setString(3, question.getOptionB());
            pstmt.setString(4, question.getOptionC());
            pstmt.setString(5, question.getOptionD());
            pstmt.setString(6, String.valueOf(question.getCorrectOption()));
            pstmt.setInt(7, question.getId());

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error updating question in database: " + e.getMessage());
        }
        return false;
    }

    /**
     * Deletes a question from the database by its ID.
     * @param questionId The ID of the question to delete.
     * @return true if successful, false otherwise.
     */
    public boolean deleteQuestion(int questionId) {
        String sql = "DELETE FROM questions WHERE id = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, questionId);

            int affectedRows = pstmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting question from database: " + e.getMessage());
        }
        return false;
    }
}
```

```java
// src/main/java/com/quizapp/view/QuizPanel.java
package com.quizapp.view;

import com.quizapp.model.Question;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * This JPanel displays a single quiz question and handles user selection.
 */
public class QuizPanel extends JPanel {
    private JLabel questionLabel;
    private JRadioButton optionA, optionB, optionC, optionD;
    private ButtonGroup optionsGroup;
    private JButton nextButton;
    private JLabel timerLabel;

    private List<Question> questions;
    private int currentQuestionIndex;
    private int score;
    private List<Character> userAnswers; // To store user's selected answers

    private QuizFrame parentFrame; // Reference to the main frame for navigation
    private ScheduledExecutorService timerExecutor;
    private AtomicInteger timeLeft;
    private final int TIME_PER_QUESTION_SECONDS = 20; // Time limit for each question

    public QuizPanel(QuizFrame parentFrame) {
        this.parentFrame = parentFrame;
        setLayout(new BorderLayout(10, 10)); // Use BorderLayout for overall layout
        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20)); // Padding

        // Initialize lists
        questions = new ArrayList<>();
        userAnswers = new ArrayList<>();

        initComponents();
        addComponents();
        addListeners();
    }

    /**
     * Initializes GUI components.
     */
    private void initComponents() {
        questionLabel = new JLabel("Question Text", SwingConstants.CENTER);
        questionLabel.setFont(new Font("Inter", Font.BOLD, 18)); // Using Inter font
        questionLabel.setForeground(new Color(51, 51, 51)); // Dark grey text

        optionA = new JRadioButton("Option A");
        optionB = new JRadioButton("Option B");
        optionC = new JRadioButton("Option C");
        optionD = new JRadioButton("Option D");

        optionsGroup = new ButtonGroup();
        optionsGroup.add(optionA);
        optionsGroup.add(optionB);
        optionsGroup.add(optionC);
        optionsGroup.add(optionD);

        // Styling for radio buttons
        Font optionFont = new Font("Inter", Font.PLAIN, 14);
        Color textColor = new Color(75, 75, 75); // Medium grey
        Color selectColor = new Color(200, 220, 255); // Light blue background on select

        JRadioButton[] options = {optionA, optionB, optionC, optionD};
        for (JRadioButton option : options) {
            option.setFont(optionFont);
            option.setForeground(textColor);
            option.setFocusPainted(false); // Remove dotted border on focus
            // Custom selection background (can be complex with default Swing radio button)
            // For a better look, consider custom painting or a library.
            // For simplicity, we just set foreground and font.
        }


        nextButton = new JButton("Next Question");
        nextButton.setFont(new Font("Inter", Font.BOLD, 16));
        nextButton.setBackground(new Color(0, 123, 255)); // Bootstrap primary blue
        nextButton.setForeground(Color.WHITE);
        nextButton.setFocusPainted(false);
        nextButton.setBorderPainted(false);
        nextButton.setOpaque(true); // Ensure background is painted
        nextButton.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20)); // Padding
        nextButton.setCursor(new Cursor(Cursor.HAND_CURSOR)); // Hand cursor on hover

        timerLabel = new JLabel("Time Left: " + TIME_PER_QUESTION_SECONDS + "s", SwingConstants.CENTER);
        timerLabel.setFont(new Font("Inter", Font.BOLD, 16));
        timerLabel.setForeground(new Color(220, 53, 69)); // Bootstrap danger red
    }

    /**
     * Adds components to the panel using a combination of layouts.
     */
    private void addComponents() {
        // Top Panel for Question and Timer
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(questionLabel, BorderLayout.CENTER);
        topPanel.add(timerLabel, BorderLayout.SOUTH);
        add(topPanel, BorderLayout.NORTH);

        // Center Panel for Options (using BoxLayout for vertical alignment)
        JPanel optionsPanel = new JPanel();
        optionsPanel.setLayout(new BoxLayout(optionsPanel, BoxLayout.Y_AXIS));
        optionsPanel.setBorder(BorderFactory.createEmptyBorder(10, 50, 10, 50)); // Padding around options
        optionsPanel.add(optionA);
        optionsPanel.add(Box.createVerticalStrut(10)); // Spacer
        optionsPanel.add(optionB);
        optionsPanel.add(Box.createVerticalStrut(10));
        optionsPanel.add(optionC);
        optionsPanel.add(Box.createVerticalStrut(10));
        optionsPanel.add(optionD);
        add(optionsPanel, BorderLayout.CENTER);

        // Bottom Panel for Next Button
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        bottomPanel.add(nextButton);
        add(bottomPanel, BorderLayout.SOUTH);
    }

    /**
     * Adds event listeners to components.
     */
    private void addListeners() {
        nextButton.addActionListener(e -> {
            checkAnswer();
            displayNextQuestion();
        });

        // Add listeners to radio buttons to enable next button when an option is selected
        JRadioButton[] options = {optionA, optionB, optionC, optionD};
        for (JRadioButton option : options) {
            option.addActionListener(e -> nextButton.setEnabled(true));
        }
    }

    /**
     * Resets the quiz state and loads questions.
     * @param questions The list of questions to use for the quiz.
     */
    public void startQuiz(List<Question> questions) {
        this.questions = questions;
        this.currentQuestionIndex = 0;
        this.score = 0;
        this.userAnswers.clear();
        nextButton.setEnabled(false); // Disable next button initially until an option is selected
        displayQuestion();
        startTimer();
    }

    /**
     * Displays the current question and its options.
     */
    private void displayQuestion() {
        if (currentQuestionIndex < questions.size()) {
            Question currentQuestion = questions.get(currentQuestionIndex);
            questionLabel.setText("<html><div style='text-align: center;'>" + currentQuestion.getQuestionText() + "</div></html>");
            optionA.setText("A) " + currentQuestion.getOptionA());
            optionB.setText("B) " + currentQuestion.getOptionB());
            optionC.setText("C) " + currentQuestion.getOptionC());
            optionD.setText("D) " + currentQuestion.getOptionD());

            optionsGroup.clearSelection(); // Clear previous selection
            nextButton.setText("Next Question");
            nextButton.setEnabled(false); // Disable until an option is selected
            resetTimer(); // Reset timer for the new question
        } else {
            // End of quiz
            endQuiz();
        }
    }

    /**
     * Starts the timer for the current question.
     */
    private void startTimer() {
        if (timerExecutor != null && !timerExecutor.isShutdown()) {
            timerExecutor.shutdownNow(); // Stop any existing timer
        }
        timeLeft = new AtomicInteger(TIME_PER_QUESTION_SECONDS);
        timerLabel.setText("Time Left: " + timeLeft.get() + "s");

        timerExecutor = Executors.newSingleThreadScheduledExecutor();
        timerExecutor.scheduleAtFixedRate(() -> {
            int remaining = timeLeft.decrementAndGet();
            if (remaining >= 0) {
                SwingUtilities.invokeLater(() -> timerLabel.setText("Time Left: " + remaining + "s"));
            } else {
                // Time's up
                timerExecutor.shutdown();
                SwingUtilities.invokeLater(() -> {
                    checkAnswer(); // Check answer even if time runs out (assuming no answer selected yet counts as wrong)
                    displayNextQuestion();
                });
            }
        }, 1, 1, TimeUnit.SECONDS);
    }

    /**
     * Resets the timer for the next question.
     */
    private void resetTimer() {
        if (timerExecutor != null && !timerExecutor.isShutdown()) {
            timerExecutor.shutdownNow();
        }
        timeLeft.set(TIME_PER_QUESTION_SECONDS);
        timerLabel.setText("Time Left: " + timeLeft.get() + "s");
    }

    /**
     * Checks the selected answer and updates the score.
     * Records the user's answer for later review.
     */
    private void checkAnswer() {
        char selectedOption = ' ';
        if (optionA.isSelected()) selectedOption = 'A';
        else if (optionB.isSelected()) selectedOption = 'B';
        else if (optionC.isSelected()) selectedOption = 'C';
        else if (optionD.isSelected()) selectedOption = 'D';

        userAnswers.add(selectedOption); // Store user's choice

        if (currentQuestionIndex < questions.size()) {
            Question currentQuestion = questions.get(currentQuestionIndex);
            if (selectedOption == currentQuestion.getCorrectOption()) {
                score++;
            }
        }
    }

    /**
     * Displays the next question or ends the quiz if all questions are answered.
     */
    private void displayNextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < questions.size()) {
            displayQuestion();
        } else {
            endQuiz();
        }
    }

    /**
     * Ends the quiz and transitions to the ResultPanel.
     */
    private void endQuiz() {
        if (timerExecutor != null) {
            timerExecutor.shutdownNow(); // Ensure timer stops
        }
        parentFrame.showResultPanel(score, questions, userAnswers);
    }
}
```

```java
// src/main/java/com/quizapp/view/ResultPanel.java
package com.quizapp.view;

import com.quizapp.model.Question;

import javax.swing.*;
import java.awt.*;
import java.util.List;

/**
 * This JPanel displays the quiz results, including score and a review of answers.
 */
public class ResultPanel extends JPanel {
    private JLabel scoreLabel;
    private JScrollPane reviewScrollPane;
    private JPanel reviewPanel; // Panel inside scroll pane to hold individual question reviews
    private JButton restartButton;
    private QuizFrame parentFrame;

    public ResultPanel(QuizFrame parentFrame) {
        this.parentFrame = parentFrame;
        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        initComponents();
        addComponents();
        addListeners();
    }

    /**
     * Initializes GUI components.
     */
    private void initComponents() {
        scoreLabel = new JLabel("Your Score: 0 / 0", SwingConstants.CENTER);
        scoreLabel.setFont(new Font("Inter", Font.BOLD, 24));
        scoreLabel.setForeground(new Color(40, 167, 69)); // Bootstrap success green

        reviewPanel = new JPanel();
        reviewPanel.setLayout(new BoxLayout(reviewPanel, BoxLayout.Y_AXIS)); // Stack reviews vertically
        reviewPanel.setBackground(Color.WHITE); // White background for review area

        reviewScrollPane = new JScrollPane(reviewPanel);
        reviewScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        reviewScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        reviewScrollPane.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY)); // Border for scroll pane

        restartButton = new JButton("Restart Quiz");
        restartButton.setFont(new Font("Inter", Font.BOLD, 16));
        restartButton.setBackground(new Color(0, 123, 255)); // Bootstrap primary blue
        restartButton.setForeground(Color.WHITE);
        restartButton.setFocusPainted(false);
        restartButton.setBorderPainted(false);
        restartButton.setOpaque(true);
        restartButton.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        restartButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }

    /**
     * Adds components to the panel.
     */
    private void addComponents() {
        add(scoreLabel, BorderLayout.NORTH);
        add(reviewScrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(restartButton);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    /**
     * Adds event listeners.
     */
    private void addListeners() {
        restartButton.addActionListener(e -> parentFrame.showQuizPanel());
    }

    /**
     * Displays the quiz results.
     * @param score The user's final score.
     * @param questions The list of all questions in the quiz.
     * @param userAnswers The list of answers provided by the user.
     */
    public void displayResults(int score, List<Question> questions, List<Character> userAnswers) {
        scoreLabel.setText(String.format("Your Score: %d / %d", score, questions.size()));
        reviewPanel.removeAll(); // Clear previous review
        reviewPanel.revalidate();
        reviewPanel.repaint();

        // Add review for each question
        for (int i = 0; i < questions.size(); i++) {
            Question q = questions.get(i);
            char userAnswer = (i < userAnswers.size()) ? userAnswers.get(i) : ' '; // Handle case where time ran out and no answer was recorded

            JPanel questionReview = new JPanel();
            questionReview.setLayout(new BoxLayout(questionReview, BoxLayout.Y_AXIS));
            questionReview.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1),
                    BorderFactory.createEmptyBorder(10, 10, 10, 10)
            ));
            questionReview.setAlignmentX(Component.LEFT_ALIGNMENT); // Align content to the left
            questionReview.setBackground(new Color(240, 248, 255)); // Light blue background for each review block

            JLabel qText = new JLabel("<html><b>Q" + (i + 1) + ": " + q.getQuestionText() + "</b></html>");
            qText.setFont(new Font("Inter", Font.BOLD, 14));
            qText.setForeground(new Color(51, 51, 51));
            qText.setAlignmentX(Component.LEFT_ALIGNMENT);

            // Display options and highlight correct/user's answer
            String[] options = {q.getOptionA(), q.getOptionB(), q.getOptionC(), q.getOptionD()};
            char[] optionChars = {'A', 'B', 'C', 'D'};

            questionReview.add(qText);
            questionReview.add(Box.createVerticalStrut(5));

            for (int j = 0; j < options.length; j++) {
                JLabel optionLabel = new JLabel(optionChars[j] + ") " + options[j]);
                optionLabel.setFont(new Font("Inter", Font.PLAIN, 12));
                optionLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

                if (optionChars[j] == q.getCorrectOption()) {
                    optionLabel.setForeground(new Color(40, 167, 69)); // Green for correct answer
                    optionLabel.setText("<html><font color='green'>&#10003;</font> " + optionChars[j] + ") " + options[j] + " <b>(Correct)</b></html>");
                } else if (optionChars[j] == userAnswer && userAnswer != q.getCorrectOption()) {
                    optionLabel.setForeground(new Color(220, 53, 69)); // Red for incorrect user answer
                    optionLabel.setText("<html><font color='red'>&#10007;</font> " + optionChars[j] + ") " + options[j] + " <b>(Your Answer)</b></html>");
                } else {
                    optionLabel.setForeground(new Color(75, 75, 75)); // Default color
                }
                questionReview.add(optionLabel);
            }
            questionReview.add(Box.createVerticalStrut(10)); // Space between questions

            reviewPanel.add(questionReview);
            reviewPanel.add(Box.createVerticalStrut(15)); // Space between each question block
        }

        reviewPanel.revalidate();
        reviewPanel.repaint();
        reviewScrollPane.getVerticalScrollBar().setValue(0); // Scroll to top
    }
}
```

```java
// src/main/java/com/quizapp/view/AdminPanel.java
package com.quizapp.view;

import com.quizapp.model.Question;
import com.quizapp.util.DatabaseManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.*;
import java.util.List;
import java.util.Vector;

/**
 * This JPanel allows administrators to manage quiz questions:
 * Add, Edit, Delete, Import, and Export questions.
 */
public class AdminPanel extends JPanel {
    private DatabaseManager dbManager;
    private QuizFrame parentFrame;

    // UI Components for Question Management
    private JTable questionsTable;
    private DefaultTableModel tableModel;
    private JScrollPane tableScrollPane;

    private JTextField questionField, optionAField, optionBField, optionCField, optionDField, correctOptionField;
    private JButton addButton, updateButton, deleteButton, clearButton;

    // UI Components for Import/Export
    private JButton importButton, exportButton;
    private JLabel statusLabel;

    public AdminPanel(QuizFrame parentFrame, DatabaseManager dbManager) {
        this.parentFrame = parentFrame;
        this.dbManager = dbManager;
        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        initComponents();
        addComponents();
        addListeners();
        loadQuestionsIntoTable(); // Load existing questions when panel is initialized
    }

    /**
     * Initializes GUI components.
     */
    private void initComponents() {
        // Table setup
        String[] columnNames = {"ID", "Question", "Option A", "Option B", "Option C", "Option D", "Correct"};
        tableModel = 
